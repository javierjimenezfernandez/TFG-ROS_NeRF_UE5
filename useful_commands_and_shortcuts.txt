
xTerminal (linux)
-----------------------------------------------------------------------
Shift+Ctrl+O 			to split the window horizontally
Shift+Ctrl+E 			to split the window vertically
Alt+arroy_keys 			to navigate between different terminals


catkin
-----------------------------------------------------------------------
catkin_make			to create the workspace if it doesn't
				exist and to compile it. It will compile
				every package code included in its src
				folder which is listed in its CMakeLists.txt

catkin_create_pkg [pkg_name]	to create a pkg. Typical dependencies are:
 [dependencies]			roscpp rospy and std_msgs


ROS
-----------------------------------------------------------------------
roscore				to initilize ROS

[ros_command] -h		to see a list of all the options available
				for [ros_command] and some useful information
				about the [ros_command]

rosnode list			to show currenntly initilized nodes
				/rosout will allways be running while
				roscore is active 

rosrun [package] [executable]	to run any node from anywhere (please
				make sure you roscore before). Once you
				write package name press TAB for 
				autocompletion features

rosnode info [node_name]	to see information about the node: topics
				to where the node is publishing or subscribed,
				services and connections

rosnode kill [node_name]	to kill a node (same as Ctrl+C in the
				window where the node is being executed)

rosnode ping [node_name]	to ping the node like a server to check
				is that node is in the graph and connected

rosrun rqt_graph rqt_graph	to show all the active nodes in a graph
 (also just rqt_graph)		and information about their interactions,
				where are they publishing... etc.

rosrun turtlesim [turlte_nodes]	testing package with nodes to test some
				ROS functionalities

rostopic list			shows all rostopics that are currently
				being published

rostopic echo [rostopic_name]	to listen to any rostopic from the command
				window

rostopic info [rostopic_name]	to show the type, the Publishers and
				Subscribers of the topic

rostopic pub -r [rate]		to publish a message with rate Hz (use TAB
 [rostopic_name] [data_type]	for autocompletion for data type and subtype)
 "[subtype]: '[message]'"

rosservice list			gives a list of current active services

rosservice call [service_name]	to directly call a service from the terminal,
 "[arg_1]: [value] ..."		press TAB for argument autocompletion

rosservice info [service_name]	it will give you which nodes are using the
				service, what is the type of the service file
				with the request and the response, and then the
				args, so basically the request you need to send
				to the service.


Notes about nodes
------------------------------------------------------------------------
when you create a python node it has to be stored in the scripts folder
of your package and execution pemissions have to be enabled with:
chmod +x [file_name]
when you create a cpp node it has to be stored in the src folder inside
the package directory and added to the CMakeLists.txt to be compiled with:
catkin_make
catkin_make has to be performed in the father catkin_ws directory


Notes about services
------------------------------------------------------------------------
Only one server can exist for every service, if you need multiple one you
will have to use prefixes like /turtle1/teleport, /turtle2/teleport etc.
You may have multiple clients for the same service.
If you search in ROS Wiki doc about service types you may find that there
is some arguments (or subtypes) above a line and some below, like this:

int64 a
int64 b
---
int64 sum

The above types are contained in the request and the below ones in the response

